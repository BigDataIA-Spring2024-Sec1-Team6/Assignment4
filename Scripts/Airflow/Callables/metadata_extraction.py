{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import csv\n",
    "import os\n",
    "import datetime\n",
    "\n",
    "# Define the classes as per the requirements\n",
    "class MetaDataClass:\n",
    "    def __init__(self, file_path, file_size, number_of_articles, creation_time, modification_time, encoding_language='UTF-8'):\n",
    "        self.file_path = file_path\n",
    "        self.file_size = file_size\n",
    "        self.number_of_articles = number_of_articles\n",
    "        self.creation_time = creation_time\n",
    "        self.modification_time = modification_time\n",
    "        self.encoding_language = encoding_language\n",
    "\n",
    "class ContentClass:\n",
    "    def __init__(self, text, file_path):\n",
    "        self.text = text\n",
    "        self.file_path = file_path\n",
    "\n",
    "# Paths and Directory setup\n",
    "path = [\n",
    "    \"/Users/akshitapathania/Desktop/Grobid_RR_2024_l1_combined_2.txt\",\n",
    "    \"/Users/akshitapathania/Desktop/Grobid_RR_2024_l2_combined_2.txt\",\n",
    "    \"/Users/akshitapathania/Desktop/Grobid_RR_2024_l3_combined_2.txt\"\n",
    "]\n",
    "\n",
    "metadata_dir = \"/Users/akshitapathania/Desktop/Metadata\"\n",
    "if not os.path.exists(metadata_dir):\n",
    "    os.makedirs(metadata_dir)\n",
    "\n",
    "# Function to convert bytes to human-readable format\n",
    "def convert_size(size_bytes):\n",
    "    GB = 1_073_741_824  # 1 GB = 1024^3 bytes\n",
    "    MB = 1_048_576      # 1 MB = 1024^2 bytes\n",
    "    if size_bytes >= GB:\n",
    "        return f\"{size_bytes / GB:.2f} GB\"\n",
    "    elif size_bytes >= MB:\n",
    "        return f\"{size_bytes / MB:.2f} MB\"\n",
    "    else:\n",
    "        return f\"{size_bytes} B\"\n",
    "    \n",
    "# Function to convert timestamp to human-readable format\n",
    "def format_timestamp(timestamp):\n",
    "    return datetime.datetime.fromtimestamp(timestamp).strftime('%Y-%m-%d %H:%M:%S')\n",
    "\n",
    "# Initialize lists for metadata and content objects\n",
    "metadata_objects = []\n",
    "content_objects = []\n",
    "\n",
    "# Process the text files\n",
    "for file in path:\n",
    "    file_stats = os.stat(file)\n",
    "    file_size_readable = convert_size(file_stats.st_size)\n",
    "    creation_time = format_timestamp(file_stats.st_ctime)\n",
    "    modification_time = format_timestamp(file_stats.st_mtime)\n",
    "\n",
    "    with open(file, 'r', encoding='utf-8') as f:\n",
    "        content = f.read()\n",
    "        number_of_articles = len(content.splitlines())\n",
    "        content_objects.append(ContentClass(content, file))\n",
    "\n",
    "    metadata_objects.append(MetaDataClass(file, file_size_readable,number_of_articles, creation_time, modification_time))\n",
    "\n",
    "\n",
    "# Write metadata and content into CSV files\n",
    "metadata_csv_file_path = os.path.join(metadata_dir, \"metadata.csv\")\n",
    "content_csv_file_path = os.path.join(metadata_dir, \"content.csv\")\n",
    "\n",
    "# Define CSV fieldnames for metadata and content\n",
    "metadata_fieldnames = ['file_path', 'file_size', 'number_of_articles', 'creation_time', 'modification_time', 'encoding_language']\n",
    "content_fieldnames = ['text', 'file_path']\n",
    "\n",
    "# Write metadata to CSV file\n",
    "with open(metadata_csv_file_path, 'w', newline='', encoding='utf-8') as metadata_csvfile:\n",
    "    metadata_writer = csv.DictWriter(metadata_csvfile, fieldnames=metadata_fieldnames)\n",
    "    metadata_writer.writeheader()\n",
    "\n",
    "    for metadata_obj in metadata_objects:\n",
    "        metadata_writer.writerow({\n",
    "            'file_path': metadata_obj.file_path,\n",
    "            'file_size': metadata_obj.file_size,\n",
    "            'number_of_articles': metadata_obj.number_of_articles,\n",
    "            'creation_time': metadata_obj.creation_time,\n",
    "            'modification_time': metadata_obj.modification_time,\n",
    "            'encoding_language': metadata_obj.encoding_language\n",
    "        })\n",
    "\n",
    "# Write content to CSV file\n",
    "with open(content_csv_file_path, 'w', newline='', encoding='utf-8') as content_csvfile:\n",
    "    content_writer = csv.DictWriter(content_csvfile, fieldnames=content_fieldnames)\n",
    "    content_writer.writeheader()\n",
    "\n",
    "    for content_obj in content_objects:\n",
    "        content_writer.writerow({\n",
    "            'text': content_obj.text,\n",
    "            'file_path': content_obj.file_path\n",
    "        })\n",
    "\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "language_info": {
   "name": "python"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
